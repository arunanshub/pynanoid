name: CI

on:
  push:
    branches:
      - master
    tags:
      - "v*.*.*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os}}

    steps:
      - name: Checkout repository 👁️
        uses: actions/checkout@v4

      - name: Install mold linker 🔗
        if: ${{ matrix.os != 'windows-latest' }}
        uses: rui314/setup-mold@v1

      - name: Install Rust 🦀
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust Cache 🗄️
        uses: Swatinem/rust-cache@v2

      - name: Install cargo nextest 🚢
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Check Rust Formatting 🖌️
        run: cargo fmt --check --all

      - name: Run Cargo Check 🚢
        run: cargo check --workspace --all-features

      - name: Run Cargo Clippy Lint 🧹
        run: cargo clippy --all-targets --all-features

      - name: Run Cargo Test 🧪
        run: cargo nextest run --all-features --workspace --release
        env:
          PROPTEST_CASES: 5000

      - name: Install Python ${{ matrix.python-version }} 🐍
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup PDM 📦
        uses: pdm-project/setup-pdm@v4.1
        id: setup-pdm
        with:
          cache: true
          python-version: ${{ matrix.python-version }}

      - name: Install uv 🌞
        id: setup-uv
        run: |
          pipx install uv
          printf "cache-dir=%s\n" "$(uv cache dir)" >> $GITHUB_OUTPUT

      - name: Setup uv cache 🌞
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup-uv.outputs.cache-dir }}
          key: uv-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pdm.lock') }}

      - name: Install Python Dependencies (using uv) 📦
        run: |
          pdm export > requirements.txt
          uv pip install -r requirements.txt --editable .

      - name: Check Python Formatting 🖌️
        run: pdm run ruff check .

      - name: Check Python Typing 🔤
        run: pdm run mypy .

      - name: Run Python Tests 🧪
        run: pdm run pytest -n auto -d --cov=src/ --cov-report=lcov --cov-branch --benchmark-disable --benchmark-skip

      - name: Upload Coverage Report 📊
        uses: coverallsapp/github-action@v2.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: "./coverage.lcov"
          parallel: true
          flag-name: run-${{ matrix.os }}-python-${{ matrix.python-version }}

  build-wheels:
    name: Build Wheels on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository 👁️
        uses: actions/checkout@v4

      - name: Install mold linker 🔗
        if: ${{ matrix.os != 'windows-latest' }}
        uses: rui314/setup-mold@v1

      - name: Install Rust 🦀
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust Cache 🗄️
        uses: Swatinem/rust-cache@v2

      - name: Install uv
        run: pipx install uv

      - name: Build wheels 🛞
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD_FRONTEND: build[uv]

      - name: Upload wheel artifacts 🫖
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: |
            ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  finish-coverage:
    name: Finish Coverage Report
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: Finish Coverage Report
        uses: coverallsapp/github-action@v2.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  publish:
    name: Publish to PyPI
    if: success() && startsWith(github.ref, 'refs/tags/v')
    needs: [build-wheels, build_sdist, test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Checkout repository 👁
        uses: actions/checkout@v4

      - name: Fetch wheel and sdist from artifacts 🫖
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          merge-multiple: true
          path: dist/

      - name: Publish to PyPI 📦
        uses: pypa/gh-action-pypi-publish@release/v1
